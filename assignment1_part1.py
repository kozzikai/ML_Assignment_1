# -*- coding: utf-8 -*-
"""Assignment1_part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4Y_jdGnM2POveSy8H0WQ8nTc1y7ZnjA
"""

# importing libraries
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import datasets
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error

# Linear regression class having fit and predict methods
class Linear_Regression:

  def __init__(self, lr, n_iters):
    self.lr = lr
    self.n_iters = n_iters
    self.weights = None
    # bias is w0
    self.bias = None

  def fit(self, X, y):
    n_samples, n_features = X.shape
    # initialising the weights
    self.weights = np.zeros(n_features)
    self.bias = 0

    for i in range(self.n_iters):

      y_pred = np.dot(X, self.weights) + self.bias

      dw = (1/ n_samples)* np.dot(X.T, (y_pred - y))
      db = (1/ n_samples)* np.sum(y_pred-y)


      self.weights = self.weights - (self.lr * dw)
      self.bias = self.bias - (self.lr * db)


  def predict(self, X):
     y_pred = np.dot(X, self.weights) + self.bias
     return y_pred

# reading the data
df = pd.read_csv('https://raw.githubusercontent.com/kozzikai/ML_Assignment_1/main/PowerPlant.csv')

# seperating the input and output variables
X = df[['AT','V','AP','RH']]
y = df['PE']

# Normalizing the data/ preprocessing
X_nor =(X - X.mean())/ X.std()

# splitting into train and test
X_train, X_test, y_train, y_test = train_test_split(X_nor,y,test_size=0.2,random_state=10)

# applying linear regression on the dataset
reg = Linear_Regression(lr =0.25, n_iters = 1500)
reg.fit(X_train,y_train)

# performance metrics
y_train_pred = reg.predict(X_train)
mse_train =mean_squared_error(y_train, y_train_pred)
rmse_train = (np.sqrt(mse_train))
r2_train = r2_score(y_train, y_train_pred)

y_test_pred = reg.predict(X_test)
mse_test =mean_squared_error(y_test, y_test_pred)
rmse_test = (np.sqrt(mse_test))
r2_test = r2_score(y_test, y_test_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'. format(mse_train))
print('RMSE is {}'.format(rmse_train))
print('R2 score is {}'.format(r2_train))
print("\n")

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'. format(mse_test))
print('RMSE is {}'.format(rmse_test))
print('R2 score is {}'.format(r2_test))
print("\n")

