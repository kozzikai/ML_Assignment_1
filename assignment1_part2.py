# -*- coding: utf-8 -*-
"""Assignment1_part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UTQovWkvlOJxa3h0CMoOiBuExosX3Fa-
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import StandardScaler

# reading the data
df = pd.read_csv('https://raw.githubusercontent.com/kozzikai/ML_Assignment_1/main/PowerPlant.csv')

# seperating the input and output variables
X = df[['AT','V','AP','RH']]
y = df['PE']

# Normalizing the data/ preprocessing
X_nor =(X - X.mean())/ X.std()

# splitting into train and test
X_train, X_test, y_train, y_test = train_test_split(X_nor,y,test_size=0.2,random_state=10)

model = SGDRegressor(eta0=0.001, learning_rate = 'constant', max_iter = 1000)

model.fit(X_train, y_train)

# performance metrics
y_train_pred = model.predict(X_train)
mse_train =mean_squared_error(y_train, y_train_pred)
rmse_train = (np.sqrt(mse_train))
r2_train = r2_score(y_train, y_train_pred)

y_test_pred = model.predict(X_test)
mse_test =mean_squared_error(y_test, y_test_pred)
rmse_test = (np.sqrt(mse_test))
r2_test = r2_score(y_test, y_test_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'. format(mse_train))
print('RMSE is {}'.format(rmse_train))
print('R2 score is {}'.format(r2_train))
print("\n")

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'. format(mse_test))
print('RMSE is {}'.format(rmse_test))
print('R2 score is {}'.format(r2_test))
print("\n")

!pip --quiet install optuna
import optuna
def objective(trial):

    lr = trial.suggest_float('lr', 0.05, 0.5, step = 0.05)
    n_iters= trial.suggest_int('n_iters', 100, 2000, step = 100)

    model = SGDRegressor(eta0=lr, learning_rate = 'constant', max_iter = n_iters)
    model.fit(X_train,y_train)
    y_train_pred = model.predict(X_train)
    return mean_squared_error(y_train, y_train_pred)

study = optuna.create_study(direction='minimize')
study.optimize(objective, n_trials=100)

trial = study.best_trial

print("Best hyperparameters: {}".format(trial.params))

